// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: diner.proto

package dinerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-times assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DinerServiceClient is the client API for DinerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DinerServiceClient interface {
	GetUserByUsername(ctx context.Context, in *GetDinerRequest, opts ...grpc.CallOption) (*DinerEntity, error)
}

type dinerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDinerServiceClient(cc grpc.ClientConnInterface) DinerServiceClient {
	return &dinerServiceClient{cc}
}

func (c *dinerServiceClient) GetUserByUsername(ctx context.Context, in *GetDinerRequest, opts ...grpc.CallOption) (*DinerEntity, error) {
	out := new(DinerEntity)
	err := c.cc.Invoke(ctx, "/diner.DinerService/GetUserByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DinerServiceServer is the server API for DinerService service.
// All implementations must embed UnimplementedDinerServiceServer
// for forward compatibility
type DinerServiceServer interface {
	GetUserByUsername(context.Context, *GetDinerRequest) (*DinerEntity, error)
	mustEmbedUnimplementedDinerServiceServer()
}

// UnimplementedDinerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDinerServiceServer struct {
}

func (UnimplementedDinerServiceServer) GetUserByUsername(context.Context, *GetDinerRequest) (*DinerEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (UnimplementedDinerServiceServer) mustEmbedUnimplementedDinerServiceServer() {}

// UnsafeDinerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DinerServiceServer will
// result in compilation errors.
type UnsafeDinerServiceServer interface {
	mustEmbedUnimplementedDinerServiceServer()
}

func RegisterDinerServiceServer(s grpc.ServiceRegistrar, srv DinerServiceServer) {
	s.RegisterService(&DinerService_ServiceDesc, srv)
}

func _DinerService_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDinerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DinerServiceServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diner.DinerService/GetUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DinerServiceServer).GetUserByUsername(ctx, req.(*GetDinerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DinerService_ServiceDesc is the grpc.ServiceDesc for DinerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DinerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diner.DinerService",
	HandlerType: (*DinerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByUsername",
			Handler:    _DinerService_GetUserByUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diner.proto",
}
